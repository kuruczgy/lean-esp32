diff --git a/pkgs/development/compilers/llvm/18/default.nix b/pkgs/development/compilers/llvm/18/default.nix
index 878f1e3a8e7e..fde993d67b70 100644
--- a/pkgs/development/compilers/llvm/18/default.nix
+++ b/pkgs/development/compilers/llvm/18/default.nix
@@ -263,7 +263,7 @@ in let
       bintools = bintools';
       extraPackages = [
         targetLlvmLibraries.compiler-rt
-      ] ++ lib.optionals (!stdenv.targetPlatform.isWasm) [
+      ] ++ lib.optionals (!stdenv.targetPlatform.isNone) [
         targetLlvmLibraries.libunwind
       ];
       extraBuildCommands = mkExtraBuildCommands cc;
@@ -272,12 +272,12 @@ in let
           "-Wno-unused-command-line-argument"
           "-B${targetLlvmLibraries.compiler-rt}/lib"
         ]
-        ++ lib.optional (!stdenv.targetPlatform.isWasm) "--unwindlib=libunwind"
+        ++ lib.optional (!stdenv.targetPlatform.isNone) "--unwindlib=libunwind"
         ++ lib.optional
-          (!stdenv.targetPlatform.isWasm && stdenv.targetPlatform.useLLVM or false)
+          (!stdenv.targetPlatform.isNone && stdenv.targetPlatform.useLLVM or false)
           "-lunwind"
-        ++ lib.optional stdenv.targetPlatform.isWasm "-fno-exceptions";
-      nixSupport.cc-ldflags = lib.optionals (!stdenv.targetPlatform.isWasm) [ "-L${targetLlvmLibraries.libunwind}/lib" ];
+        ++ lib.optional stdenv.targetPlatform.isNone "-fno-exceptions";
+      nixSupport.cc-ldflags = lib.optionals (!stdenv.targetPlatform.isNone) [ "-L${targetLlvmLibraries.libunwind}/lib" ];
     };
 
     clangNoLibcxx = wrapCCWith rec {
@@ -294,7 +294,7 @@ in let
           "-B${targetLlvmLibraries.compiler-rt}/lib"
           "-nostdlib++"
         ]
-        ++ lib.optional stdenv.targetPlatform.isWasm "-fno-exceptions";
+        ++ lib.optional stdenv.targetPlatform.isNone "-fno-exceptions";
     };
 
     clangNoLibc = wrapCCWith rec {
@@ -310,7 +310,7 @@ in let
           "-rtlib=compiler-rt"
           "-B${targetLlvmLibraries.compiler-rt}/lib"
         ]
-        ++ lib.optional stdenv.targetPlatform.isWasm "-fno-exceptions";
+        ++ lib.optional stdenv.targetPlatform.isNone "-fno-exceptions";
     };
 
     clangNoCompilerRt = wrapCCWith rec {
@@ -323,7 +323,7 @@ in let
         [
           "-nostartfiles"
         ]
-        ++ lib.optional stdenv.targetPlatform.isWasm "-fno-exceptions";
+        ++ lib.optional stdenv.targetPlatform.isNone "-fno-exceptions";
     };
 
     clangNoCompilerRtWithLibc = wrapCCWith (rec {
@@ -332,7 +332,7 @@ in let
       bintools = bintools';
       extraPackages = [ ];
       extraBuildCommands = mkExtraBuildCommands0 cc;
-    } // lib.optionalAttrs stdenv.targetPlatform.isWasm {
+    } // lib.optionalAttrs stdenv.targetPlatform.isNone {
       nixSupport.cc-cflags = [ "-fno-exceptions" ];
     });
 
diff --git a/pkgs/development/compilers/llvm/common/libcxx/default.nix b/pkgs/development/compilers/llvm/common/libcxx/default.nix
index b2c23f35f0a1..5d2ff5c1b6ce 100644
--- a/pkgs/development/compilers/llvm/common/libcxx/default.nix
+++ b/pkgs/development/compilers/llvm/common/libcxx/default.nix
@@ -16,7 +16,7 @@
 , cxxabi ? null
 , libcxxrt
 , libunwind
-, enableShared ? !stdenv.hostPlatform.isStatic
+, enableShared ? !stdenv.hostPlatform.isStatic && !stdenv.hostPlatform.isNone
 }:
 
 # note: our setup using libcxxabi instead of libcxxrt on FreeBSD diverges from
@@ -56,13 +56,13 @@ let
 
   cxxabiCMakeFlags = lib.optionals (lib.versionAtLeast release_version "18") [
     "-DLIBCXXABI_USE_LLVM_UNWINDER=OFF"
-  ] ++ lib.optionals (useLLVM && !stdenv.hostPlatform.isWasm) (if lib.versionAtLeast release_version "18" then [
+  ] ++ lib.optionals (useLLVM && !stdenv.hostPlatform.isNone) (if lib.versionAtLeast release_version "18" then [
     "-DLIBCXXABI_ADDITIONAL_LIBRARIES=unwind"
     "-DLIBCXXABI_USE_COMPILER_RT=ON"
   ] else [
     "-DLIBCXXABI_USE_COMPILER_RT=ON"
     "-DLIBCXXABI_USE_LLVM_UNWINDER=ON"
-  ]) ++ lib.optionals stdenv.hostPlatform.isWasm [
+  ]) ++ lib.optionals stdenv.hostPlatform.isNone [
     "-DLIBCXXABI_ENABLE_THREADS=OFF"
     "-DLIBCXXABI_ENABLE_EXCEPTIONS=OFF"
   ] ++ lib.optionals (!enableShared) [
@@ -87,10 +87,12 @@ let
     "-DLIBCXX_USE_COMPILER_RT=ON"
   ] ++ lib.optionals (useLLVM && lib.versionAtLeast release_version "16") [
     "-DLIBCXX_ADDITIONAL_LIBRARIES=unwind"
-  ] ++ lib.optionals stdenv.hostPlatform.isWasm [
+  ] ++ lib.optionals stdenv.hostPlatform.isNone [
     "-DLIBCXX_ENABLE_THREADS=OFF"
     "-DLIBCXX_ENABLE_FILESYSTEM=OFF"
     "-DLIBCXX_ENABLE_EXCEPTIONS=OFF"
+    "-DLIBCXX_ENABLE_LOCALIZATION=OFF"
+    "-DLIBCXX_ENABLE_MONOTONIC_CLOCK=OFF"
   ] ++ lib.optionals (!enableShared) [
     "-DLIBCXX_ENABLE_SHARED=OFF"
   ];
@@ -109,6 +111,8 @@ in
 stdenv.mkDerivation (rec {
   inherit pname version cmakeFlags patches;
 
+  NIX_CFLAGS_COMPILE = [ "-ffunction-sections" ];
+
   src = src';
 
   outputs = [ "out" "dev" ];
@@ -122,7 +126,7 @@ stdenv.mkDerivation (rec {
     ++ lib.optional (cxxabi != null) lndir;
 
   buildInputs = [ cxxabi ]
-    ++ lib.optionals (useLLVM && !stdenv.hostPlatform.isWasm) [ libunwind ];
+    ++ lib.optionals (useLLVM && !stdenv.hostPlatform.isNone) [ libunwind ];
 
   # libc++.so is a linker script which expands to multiple libraries,
   # libc++.so.1 and libc++abi.so or the external cxxabi. ld-wrapper doesn't
